package com.github.matiasvergaras.finalreality.model.character.player.Normal;

import com.github.matiasvergaras.finalreality.model.character.ICharacter;
import com.github.matiasvergaras.finalreality.model.weapon.Magic.Staff;
import com.github.matiasvergaras.finalreality.model.weapon.Normal.Bow;
import com.github.matiasvergaras.finalreality.model.weapon.Normal.Knife;
import com.github.matiasvergaras.finalreality.model.weapon.Normal.Sword;
import org.jetbrains.annotations.NotNull;

import java.util.Objects;
import java.util.concurrent.BlockingQueue;

/**
 * Class to represent a ''Thief'' unit.
 * <p>
 *Thieves can equip Swords, Knives (Knife) and Bows, and cannot use any Spells.
 *
 * @author Mat√≠as Vergara Silva
 *
 */
public class Thief extends AbstractNormalCharacter{
    /**
     * Creates a new Thief Character.
     * @param turnsQueue
     *     the queue with the characters ready to play
     * @param name
     *     the character's name
     * @param HP
     *     the character's heal points
     * @param DP
     *     the character's defense points
     */
    public Thief(@NotNull BlockingQueue<ICharacter> turnsQueue,
                 @NotNull String name, int HP, int DP) {
        super(turnsQueue, name, "THIEF", HP, DP);
    }

    /**
     * Equips a Sword to this character
     * @param weapon
     *        the Sword to equip
     */
    public void equip(Sword weapon) {
        equippedWeapon = weapon;
    }

    /**
     * Equips a Bow to this character
     * @param weapon
     *        the Bow to equip
     */
    public void equip(Bow weapon) {
        equippedWeapon = weapon;
    }

    /**
     * Equips a Knife to this character
     * @param weapon
     *        the Knife to equip
     */
    public void equip(Knife weapon) {
        equippedWeapon = weapon;
    }


    /**
     * Check if this is equal to a given object o.
     * @param o The target object
     * @return True if are equals, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Thief)) return false;
        Thief that = (Thief) o;
        return this.getCharacterClass().equals(that.getCharacterClass()) &&
                this.getEquippedWeapon().equals(that.getEquippedWeapon()) &&
                this.getName().equals(that.getName()) &&
                this.getHP()==that.getHP() &&
                this.getDP()==that.getDP();
    }

    /**
     * Returns an integer value, generated by a hashing algorithm, distinct
     * for distinct objects. Required for the equals method.
     * @return Integer hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.getEquippedWeapon(),this.getName(),
                this.getCharacterClass() , this.getDP(), this.getHP());
    }


}
