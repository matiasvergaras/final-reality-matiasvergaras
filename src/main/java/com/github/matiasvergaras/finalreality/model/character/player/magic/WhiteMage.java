package com.github.matiasvergaras.finalreality.model.character.player.magic;

import com.github.matiasvergaras.finalreality.model.character.ICharacter;
import com.github.matiasvergaras.finalreality.model.character.cpu.ICPUCharacter;
import com.github.matiasvergaras.finalreality.model.character.player.IPlayerCharacter;
import com.github.matiasvergaras.finalreality.model.weapon.IWeapon;
import org.jetbrains.annotations.NotNull;

import java.util.Objects;
import java.util.concurrent.BlockingQueue;

/**
 * Class to represent a ''White Wizard'' unit.
 * <p>
 * White Wizards can can equip only Staves (Staff), and use Heal, Poison and Paralysis Spells.
 *
 * @author Mat√≠as Vergara Silva
 */

public class WhiteMage extends AbstractMagicCharacter {

    /**
     * Creates a new White Wizard Character.
     *
     * @param turnsQueue the queue with the characters ready to play.
     * @param name       the character's name
     * @param HP         the character's heal points
     * @param DP         the character's defense points
     * @param mana       the character's mana points
     */
    public WhiteMage(@NotNull BlockingQueue<ICharacter> turnsQueue,
                     @NotNull String name, int HP, int DP, int mana) {
        super(turnsQueue, name, HP, DP, mana);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void equipWeapon(IWeapon weapon) {
        weapon.equipToWhiteMage(this);
    }

    /**
     * {@inheritDoc}
     *
     * @param enemy the enemy that will receive the magic attack
     */
    @Override
    public void useParalysisSpell(ICPUCharacter enemy) {
        if (this.getCurrentMana() > 25) {
            enemy.setParalyzed();
            this.reduceMana(25);
        } else {
            //Temporary ''solution''. Actually this will still do an attack (without effect),
            // but we want this case to do nothing, so the player can try with
            // another movement.
            System.out.println("Not enough mana");
        }
    }

    /**
     * {@inheritDoc}
     *
     * @param enemy the enemy that will receive the magic attack
     */
    @Override
    public void usePoisonSpell(ICPUCharacter enemy) {
        if (this.getCurrentMana() > 40) {
            enemy.setPoisoned();
            this.reduceMana(40);
        } else {
            //Temporary ''solution''. Actually this will still do an attack (without effect),
            // but we want this case to do nothing, so the player can try with
            // another movement.
            System.out.println("Not enough mana");
        }
    }

    /**
     * {@inheritDoc}
     *
     * @param ally the ally that will receive the heal
     */
    @Override
    public void useHealSpell(IPlayerCharacter ally) {
        if (this.getCurrentMana() > 15) {
            ally.receiveHeal();
            this.reduceMana(15);
        } else {
            //Temporary ''solution''. Actually this will still do an attack (without effect),
            // but we want this case to do nothing, so the player can try with
            // another movement.
            System.out.println("Not enough mana");
        }
    }

    /**
     * Check if this is equal to a given object o.
     *
     * @param o The target object
     * @return True if are equals, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof WhiteMage)) return false;
        WhiteMage that = (WhiteMage) o;
        return this.getName().equals(that.getName()) &&
                this.getMaxHP() == that.getMaxHP() &&
                this.getMaxDP() == that.getMaxDP() &&
                this.getMaxMana() == that.getMaxMana() &&
                this.getCurrentDP() == that.getCurrentDP() &&
                this.getCurrentHP() == that.getCurrentHP() &&
                this.getCurrentMana() == that.getCurrentMana();
    }

    /**
     * Returns an integer value, generated by a hashing algorithm, distinct
     * for distinct objects. Required for the equals method.
     *
     * @return Integer hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.getName(), this.getMaxHP(), this.getMaxDP(),
                +this.getMaxMana());
    }


}
