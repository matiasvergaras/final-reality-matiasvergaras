package com.github.matiasvergaras.finalreality.model.character.cpu;

import com.github.matiasvergaras.finalreality.model.character.ICharacter;
import org.jetbrains.annotations.NotNull;

import java.util.Objects;
import java.util.concurrent.BlockingQueue;

/**
 * A class that holds all the information of a single enemy of the game.
 * @author Ignacio Slater Muñoz
 * @author Matías Vergara Silva
 */
public class Enemy extends AbstractCPUCharacter {

    /**
     * Creates a new Enemy Character.
     *
     * @param turnsQueue the queue with the characters ready to play
     * @param name       the character's name
     * @param weight     the character's weight
     * @param HP         the character's heal points
     * @param DP         the character's defense points
     * @param power      the character's power points
     */

    public Enemy(@NotNull final BlockingQueue<ICharacter> turnsQueue,
                 @NotNull final String name, int weight,
                 int HP, int DP, int power) {
        super(turnsQueue, name, weight, HP, DP, power);
    }

    /**
     * Check if this is equal to a given object o.
     *
     * @param o The target object
     * @return True if are equals, false otherwise
     */
    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Enemy)) {
            return false;
        }
        final Enemy that = (Enemy) o;
        return this.getWeight() == that.getWeight() &&
                this.getName().equals(that.getName()) &&
                this.getMaxDP() == that.getMaxDP() &&
                this.getMaxHP() == that.getMaxHP() &&
                this.getPower() == that.getPower();
    }


    /**
     * Returns an integer value, generated by a hashing algorithm, distinct
     * for distinct objects. Required for the equals method.
     *
     * @return Integer hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.getWeight() + this.getName()
                + this.getPower() + this.getMaxDP() + this.getMaxHP());
    }


}


