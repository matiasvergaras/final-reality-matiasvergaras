package com.github.matiasvergaras.finalreality.model.character.player;

import com.github.matiasvergaras.finalreality.model.weapon.IWeapon;

import java.util.Objects;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * A class to represent a NullCharacter.
 * <p> A null character has an empty name, 0 HP and 0 DP. It does not have any other attribute. </p>
 * <p> His mission is to help us keep the numberof NullPointers as low as possible (since it is
 * an implementation of Null Pattern). </p>
 * @author Mat√≠as Vergara Silva
 * @since Homework 2
 */
public class NullCharacter extends AbstractPlayerCharacter{
    /**
     * Creates a new Null Character
     *
     * @param turnsQueue the queue with the characters ready to play
     * @param name       the character's name
     * @param HP         the character's max heal points
     * @param DP         the character's max defense points
     */
    public NullCharacter() {
        super(new LinkedBlockingQueue<>(), "", 0, 0);
    }


    /**
     * No weapon should be equipped to a NullCharacter.
     *
     */
    @Override
    public void equipWeapon(IWeapon weapon) {
    }

    /**
     * Check if this is equal to a given object o.
     *
     * @param o The target object
     * @return True if are equals, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof NullCharacter)) return false;
        NullCharacter that = (NullCharacter) o;
        return this.getName().equals(that.getName());
    }

    /**
     * Returns an integer value, generated by a hashing algorithm, distinct
     * for distinct objects. Required for the equals method.
     *
     * @return Integer hash code.
     */
    @Override
    public int hashCode() {
        return Objects.hash(this.getName());
    }

}
